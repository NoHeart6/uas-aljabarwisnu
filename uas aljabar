<!DOCTYPE html>
<html lang="id">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Kalkulator Invers Matriks</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background-color: #f4f4f4;
      margin: 0;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      height: 100vh;
    }

    #container {
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      padding: 30px;
      text-align: center;
      margin-bottom: 20px;
      width: 90%;
      max-width: 500px;
    }

    h1 {
      color: #333;
      font-size: 1.5em;
    }

    .input-section {
      margin-bottom: 20px;
      text-align: left;
    }

    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }

    input[type="number"],
    input[type="file"],
    select {
      width: calc(100% - 16px);
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
      margin-bottom: 10px;
    }

    .input-matriks {
      width: 50px;
      margin: 2px;
      padding: 5px;
      font-size: 16px;
      text-align: center;
    }

    button {
      background-color: #4CAF50;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      margin-top: 10px;
    }

    button:hover {
      background-color: #45a049;
    }

    table {
      width: 100%;
      margin-top: 20px;
      border-collapse: collapse;
    }

    th,
    td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: center;
      font-size: 0.9em;
    }

    th {
      background-color: #f0f0f0;
    }

    .error {
      color: red;
      margin-top: 10px;
    }

    .instructions {
      font-size: 14px;
      color: #777;
      margin-top: 5px;
    }

    .instructions ul {
      list-style-type: disc;
      margin-left: 20px;
      padding: 0;
    }

    .watermark {
      font-size: 12px;
      color: #aaa;
      text-align: center;
      margin-top: 20px;
    }

    /* Responsiveness */
    @media (max-width: 600px) {
      #container {
        padding: 20px;
      }

      h1 {
        font-size: 1.2em;
      }

      button {
        font-size: 14px;
        padding: 8px 16px;
      }

      th,
      td {
        padding: 6px;
      }
    }
  </style>
</head>

<body>
  <div id="container">
    <h1>Kalkulator Invers Matriks</h1>

    <div class="input-section">
      <label for="metode-input">1. Pilih Metode Input:</label>
      <select id="metode-input">
        <option value="manual">Input Manual</option>
        <option value="file">Upload File</option>
      </select>
    </div>

    <div id="input-manual" class="input-section">
      <label for="ukuran">2a. Ukuran Matriks (n x n):</label>
      <input type="number" id="ukuran" min="2" value="2">
      <div class="instructions">Masukkan ukuran matriks (misal: untuk matriks 2x2, masukkan 2).</div>

      <label for="matriks-input">2b. Elemen Matriks:</label>
      <div class="instructions">Masukkan elemen matriks:</div>
      <div id="matriks-input"></div>
    </div>

    <div id="input-file" class="input-section" style="display: none;">
      <label for="upload-file">2. Upload File Matriks (.txt):</label>
      <input type="file" id="upload-file" accept=".txt">
      <div class="instructions">
        Pastikan format file .txt benar:
        <ul>
          <li>Setiap baris mewakili satu baris matriks.</li>
          <li>Elemen matriks dalam satu baris dipisahkan oleh spasi.</li>
        </ul>
      </div>
    </div>

    <button id="hitung">Hitung Invers</button>

    <div id="hasil"></div>
  </div>

  <div class="watermark">
    Aplikasi ini dibuat oleh Wisnu Hidayat dengan NIM 231240001422 untuk memenuhi tugas UAS Aljabar.
  </div>

  <script>
    const metodeInputSelect = document.getElementById('metode-input');
    const inputManualDiv = document.getElementById('input-manual');
    const inputFileDiv = document.getElementById('input-file');
    const uploadFileInput = document.getElementById('upload-file');
    const ukuranInput = document.getElementById('ukuran');
    const matriksInput = document.getElementById('matriks-input');
    const hitungButton = document.getElementById('hitung');
    const hasilDiv = document.getElementById('hasil');

    function generateMatriksInput(ukuran) {
      let html = '';
      for (let i = 0; i < ukuran; i++) {
        for (let j = 0; j < ukuran; j++) {
          html += `<input type="number" id="m${i}${j}" class="input-matriks" value="0">`;
        }
        html += '<br>';
      }
      matriksInput.innerHTML = html;
    }

    function getMatriksValues(ukuran) {
      const matriks = [];
      for (let i = 0; i < ukuran; i++) {
        matriks[i] = [];
        for (let j = 0; j < ukuran; j++) {
          const value = parseFloat(document.getElementById(`m${i}${j}`).value);
          if (isNaN(value)) {
            displayError(`Masukkan angka valid pada baris ${i + 1}, kolom ${j + 1}.`);
            return null;
          }
          matriks[i][j] = value;
        }
      }
      return matriks;
    }

    function inversMatriks(matriks) {
      const n = matriks.length;
      const identitas = [];
      for (let i = 0; i < n; i++) {
        identitas[i] = [];
        for (let j = 0; j < n; j++) {
          identitas[i][j] = i === j ? 1 : 0;
        }
        matriks[i] = [...matriks[i], ...identitas[i]];
      }

      for (let i = 0; i < n; i++) {
        let pivot = matriks[i][i];
        if (pivot === 0) {
          for (let j = i + 1; j < n; j++) {
            if (matriks[j][i] !== 0) {
              [matriks[i], matriks[j]] = [matriks[j], matriks[i]];
              pivot = matriks[i][i];
              break;
            }
          }
          if (pivot === 0) {
            return null;
          }
        }

        for (let j = 0; j < 2 * n; j++) {
          matriks[i][j] /= pivot;
        }

        for (let j = 0; j < n; j++) {
          if (i !== j) {
            const faktor = matriks[j][i];
            for (let k = 0; k < 2 * n; k++) {
              matriks[j][k] -= faktor * matriks[i][k];
            }
          }
        }
      }

      const invers = [];
      for (let i = 0; i < n; i++) {
        invers[i] = matriks[i].slice(n);
      }
      return invers;
    }

    function displayHasil(matriks, invers) {
      let html = '<h2>Matriks Asli:</h2><table>';
      for (let i = 0; i < matriks.length; i++) {
        html += '<tr>';
        for (let j = 0; j <         matriks[i].length; j++) {
          html += `<td>${matriks[i][j]}</td>`;
        }
        html += '</tr>';
      }
      html += '</table>';
      
      html += '<h2>Matriks Invers:</h2><table>';
      for (let i = 0; i < invers.length; i++) {
        html += '<tr>';
        for (let j = 0; j < invers[i].length; j++) {
          html += `<td>${invers[i][j]}</td>`;
        }
        html += '</tr>';
      }
      html += '</table>';

      hasilDiv.innerHTML = html;
    }

    function displayError(message) {
      hasilDiv.innerHTML = `<p class="error">${message}</p>`;
    }

    function parseMatriksFromFile(fileContent) {
      const baris = fileContent.trim().split('\n');
      const matriks = [];
      for (let i = 0; i < baris.length; i++) {
        const elemen = baris[i].trim().split(/\s+/).map(Number);
        if (elemen.length !== baris.length || elemen.some(isNaN)) {
          displayError('Format file tidak valid.');
          return null;
        }
        matriks.push(elemen);
      }
      return matriks;
    }

    function hitungDanTampilkanInvers(matriks) {
      const invers = inversMatriks(matriks);
      if (invers) {
        displayHasil(matriks, invers);
      } else {
        displayError('Matriks tidak memiliki invers.');
      }
    }

    metodeInputSelect.addEventListener('change', () => {
      const metodeInput = metodeInputSelect.value;
      if (metodeInput === 'manual') {
        inputManualDiv.style.display = 'block';
        inputFileDiv.style.display = 'none';
      } else {
        inputManualDiv.style.display = 'none';
        inputFileDiv.style.display = 'block';
      }
    });

    ukuranInput.addEventListener('input', () => {
      const ukuran = parseInt(ukuranInput.value);
      generateMatriksInput(ukuran);
    });

    hitungButton.addEventListener('click', () => {
      const metodeInput = metodeInputSelect.value;
      let matriks;

      if (metodeInput === 'manual') {
        const ukuran = parseInt(document.getElementById('ukuran').value);
        matriks = getMatriksValues(ukuran);
        if (matriks) {
          hitungDanTampilkanInvers(matriks);
        }
      } else {
        const file = uploadFileInput.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (event) => {
            matriks = parseMatriksFromFile(event.target.result);
            if (matriks) {
              hitungDanTampilkanInvers(matriks);
            }
          };
          reader.readAsText(file);
        } else {
          displayError('Pilih file matriks terlebih dahulu.');
        }
      }
    });

    generateMatriksInput(parseInt(ukuranInput.value));
  </script>
</body>

</html>
